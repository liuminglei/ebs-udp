package com.ebs.common.jdbcspy;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * SpyStatement
 *
 * @工程： 核心4.0
 * @模块： 核心-常用-jdbcspy
 * 
 * @作者： 刘明磊
 * @创建日期： 2015年11月7日
 * 
 * @修改记录（修改时间、作者、原因）：
 */
public class SpyStatement implements Statement {
    private Statement realStatement;

    public SpyStatement(Statement statement) {
        this.realStatement = statement;
    }

    public void addBatch(String sql) throws SQLException {
        SpyLog.info(this, "addBatch", new Object[] { connCode(), sql });
        this.realStatement.addBatch(sql);
    }

    public void cancel() throws SQLException {
        this.realStatement.cancel();
    }

    public void clearBatch() throws SQLException {
        this.realStatement.clearBatch();
    }

    public void clearWarnings() throws SQLException {
        this.realStatement.clearWarnings();
    }

    public void close() throws SQLException {
        this.realStatement.close();
    }

    public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
        SpyLog.info(this, "execute", new Object[] { connCode(), sql });
        return this.realStatement.execute(sql, autoGeneratedKeys);
    }

    public boolean execute(String sql, int[] columnIndexes) throws SQLException {
        SpyLog.info(this, "execute", new Object[] { connCode(), sql });
        return this.realStatement.execute(sql, columnIndexes);
    }

    public boolean execute(String sql, String[] columnNames) throws SQLException {
        SpyLog.info(this, "execute", new Object[] { connCode(), sql });
        return this.realStatement.execute(sql, columnNames);
    }

    public boolean execute(String sql) throws SQLException {
        SpyLog.info(this, "execute", new Object[] { connCode(), sql });
        return this.realStatement.execute(sql);
    }

    public int[] executeBatch() throws SQLException {
        return this.realStatement.executeBatch();
    }

    public ResultSet executeQuery(String sql) throws SQLException {
        SpyLog.info(this, "executeQuery", new Object[] { connCode(), sql });
        long t = System.currentTimeMillis();
        ResultSet resultSet = new SpyResultSet(this.realStatement.executeQuery(sql));
        SpyLog.info(this, "executeQueryTime", new Object[] { connCode(), " " + (System.currentTimeMillis() - t) + " 毫秒" });
        return resultSet;
    }

    public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
        SpyLog.info(this, "executeUpdate", new Object[] { connCode(), sql });
        return this.realStatement.executeUpdate(sql, autoGeneratedKeys);
    }

    public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
        SpyLog.info(this, "executeUpdate", new Object[] { connCode(), sql });
        return this.realStatement.executeUpdate(sql, columnIndexes);
    }

    public int executeUpdate(String sql, String[] columnNames) throws SQLException {
        SpyLog.info(this, "executeUpdate", new Object[] { connCode(), sql });
        return this.realStatement.executeUpdate(sql, columnNames);
    }

    public int executeUpdate(String sql) throws SQLException {
        SpyLog.info(this, "executeUpdate", new Object[] { connCode(), sql });
        return this.realStatement.executeUpdate(sql);
    }

    public Connection getConnection() throws SQLException {
        return this.realStatement.getConnection();
    }

    public int getFetchDirection() throws SQLException {
        return this.realStatement.getFetchDirection();
    }

    public int getFetchSize() throws SQLException {
        return this.realStatement.getFetchSize();
    }

    public ResultSet getGeneratedKeys() throws SQLException {
        return new SpyResultSet(this.realStatement.getGeneratedKeys());
    }

    public int getMaxFieldSize() throws SQLException {
        return this.realStatement.getMaxFieldSize();
    }

    public int getMaxRows() throws SQLException {
        return this.realStatement.getMaxRows();
    }

    public boolean getMoreResults() throws SQLException {
        return this.realStatement.getMoreResults();
    }

    public boolean getMoreResults(int current) throws SQLException {
        return this.realStatement.getMoreResults(current);
    }

    public int getQueryTimeout() throws SQLException {
        return this.realStatement.getQueryTimeout();
    }

    public ResultSet getResultSet() throws SQLException {
        return new SpyResultSet(this.realStatement.getResultSet());
    }

    public int getResultSetConcurrency() throws SQLException {
        return this.realStatement.getResultSetConcurrency();
    }

    public int getResultSetHoldability() throws SQLException {
        return this.realStatement.getResultSetHoldability();
    }

    public int getResultSetType() throws SQLException {
        return this.realStatement.getResultSetType();
    }

    public int getUpdateCount() throws SQLException {
        return this.realStatement.getUpdateCount();
    }

    public SQLWarning getWarnings() throws SQLException {
        return this.realStatement.getWarnings();
    }

    public boolean isClosed() throws SQLException {
        return this.realStatement.isClosed();
    }

    public boolean isPoolable() throws SQLException {
        return this.realStatement.isPoolable();
    }

    public boolean isWrapperFor(Class<?> iface) throws SQLException {
        return this.realStatement.isWrapperFor(iface);
    }

    public void setCursorName(String name) throws SQLException {
        this.realStatement.setCursorName(name);
    }

    public void setEscapeProcessing(boolean enable) throws SQLException {
        this.realStatement.setEscapeProcessing(enable);
    }

    public void setFetchDirection(int direction) throws SQLException {
        this.realStatement.setFetchDirection(direction);
    }

    public void setFetchSize(int rows) throws SQLException {
        this.realStatement.setFetchSize(rows);
    }

    public void setMaxFieldSize(int max) throws SQLException {
        this.realStatement.setMaxFieldSize(max);
    }

    public void setMaxRows(int max) throws SQLException {
        this.realStatement.setMaxRows(max);
    }

    public void setPoolable(boolean poolable) throws SQLException {
        this.realStatement.setPoolable(poolable);
    }

    public void setQueryTimeout(int seconds) throws SQLException {
        this.realStatement.setQueryTimeout(seconds);
    }

    public <T> T unwrap(Class<T> iface) throws SQLException {
        return this.realStatement.unwrap(iface);
    }

    public void closeOnCompletion() throws SQLException {
        this.realStatement.closeOnCompletion();
    }

    public boolean isCloseOnCompletion() throws SQLException {
        return this.realStatement.isCloseOnCompletion();
    }

    private String connCode() throws SQLException {
        return "CONN[" + this.realStatement.getConnection().hashCode() + "]";
    }
}